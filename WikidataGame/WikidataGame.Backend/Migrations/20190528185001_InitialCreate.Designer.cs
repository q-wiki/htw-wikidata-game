// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WikidataGame.Backend.Helpers;

namespace WikidataGame.Backend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190528185001_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("WikidataGame.Backend.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "e9019ee1-0eed-492d-8aa7-feb1974fb265",
                            Title = "Nature"
                        },
                        new
                        {
                            Id = "ddd333f7-ef45-4e13-a2ca-fb4494dce324",
                            Title = "Culture"
                        },
                        new
                        {
                            Id = "cf3111af-8b18-4c6f-8ee6-115157d54b79",
                            Title = "Geography"
                        },
                        new
                        {
                            Id = "1b9185c0-c46b-4abf-bf82-e464f5116c7d",
                            Title = "Space"
                        },
                        new
                        {
                            Id = "6c22af9b-2f45-413b-995d-7ee6c61674e5",
                            Title = "Natural Sciences"
                        },
                        new
                        {
                            Id = "f9c52d1a-9315-423d-a818-94c1769fffe5",
                            Title = "History"
                        },
                        new
                        {
                            Id = "4941c348-b4c4-43b5-b3d4-85794c68eec4",
                            Title = "Celebrities"
                        },
                        new
                        {
                            Id = "2a388146-e32c-4a08-a246-472eff12849a",
                            Title = "Entertainment"
                        },
                        new
                        {
                            Id = "7f2baca7-cdf4-4e24-855b-c868d9030ba4",
                            Title = "Politics"
                        },
                        new
                        {
                            Id = "3d6c54d3-0fda-4923-a00e-e930640430b3",
                            Title = "Sports"
                        });
                });

            modelBuilder.Entity("WikidataGame.Backend.Models.Game", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<string>("NextMovePlayerId")
                        .HasMaxLength(36);

                    b.Property<string>("WinningPlayerId")
                        .HasMaxLength(36);

                    b.HasKey("Id");

                    b.HasIndex("NextMovePlayerId");

                    b.HasIndex("WinningPlayerId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("WikidataGame.Backend.Models.GameUser", b =>
                {
                    b.Property<string>("GameId")
                        .HasMaxLength(36);

                    b.Property<string>("UserId")
                        .HasMaxLength(36);

                    b.HasKey("GameId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GameUser");
                });

            modelBuilder.Entity("WikidataGame.Backend.Models.MiniGame", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<string>("AnswerOptionsString")
                        .IsRequired();

                    b.Property<string>("CorrectAnswerString")
                        .IsRequired();

                    b.Property<string>("GameId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<bool>("IsWin");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<string>("TaskDescription")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("MiniGames");
                });

            modelBuilder.Entity("WikidataGame.Backend.Models.Question", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<int>("MiniGameType");

                    b.Property<string>("SparqlQuery")
                        .IsRequired();

                    b.Property<string>("TaskDescription")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = "a4b7c4ba-6acb-4f9a-821b-7a44aa7b6761",
                            CategoryId = "cf3111af-8b18-4c6f-8ee6-115157d54b79",
                            MiniGameType = 2,
                            SparqlQuery = @"SELECT ?answer ?question WHERE {  
                          ? item wdt:P31 wd:Q5119.
                          ? item wdt:P1376 ? land.
                          ? land wdt : P31 wd:Q6256.
                          OPTIONAL { 
                            ?item rdfs:label ? answer;
                                    filter(lang(?answer) = 'en')
                              ? land rdfs:label? question;
                                    filter(lang(?question) = 'en').
                          }
                            }
                        ORDER BY RAND() LIMIT 4",
                            TaskDescription = "What is the name of the capital of {0}?"
                        },
                        new
                        {
                            Id = "aca0f5f7-b000-42fb-b713-f5fe43748761",
                            CategoryId = "cf3111af-8b18-4c6f-8ee6-115157d54b79",
                            MiniGameType = 2,
                            SparqlQuery = @"SELECT ?answer (COUNT(?item) AS ?question)
                        WHERE 
                        {
                          ?item wdt:P31 wd:Q6256.
                          ?item wdt:P30 ?continent.
                          ?continent wdt:P31 wd:Q5107.
                          OPTIONAL {?continent rdfs:label ?answer ;
                                    filter(lang(?answer) = 'en')
                                          }
                        }
                        GROUP BY ?continent ?answer
                        ORDER BY RAND()
                        LIMIT 4",
                            TaskDescription = "How many countries are on the continent {0}?"
                        });
                });

            modelBuilder.Entity("WikidataGame.Backend.Models.Tile", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<string>("ChosenCategoryId")
                        .HasMaxLength(36);

                    b.Property<int>("Difficulty");

                    b.Property<string>("GameId");

                    b.Property<bool>("IsAccessible");

                    b.Property<string>("OwnerId")
                        .HasMaxLength(36);

                    b.HasKey("Id");

                    b.HasIndex("ChosenCategoryId");

                    b.HasIndex("GameId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Tiles");
                });

            modelBuilder.Entity("WikidataGame.Backend.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<string>("DeviceId")
                        .IsRequired();

                    b.Property<int>("Platform");

                    b.Property<string>("PushChannelUrl");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WikidataGame.Backend.Models.Game", b =>
                {
                    b.HasOne("WikidataGame.Backend.Models.User", "NextMovePlayer")
                        .WithMany()
                        .HasForeignKey("NextMovePlayerId");

                    b.HasOne("WikidataGame.Backend.Models.User", "WinningPlayer")
                        .WithMany()
                        .HasForeignKey("WinningPlayerId");
                });

            modelBuilder.Entity("WikidataGame.Backend.Models.GameUser", b =>
                {
                    b.HasOne("WikidataGame.Backend.Models.Game", "Game")
                        .WithMany("GameUsers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WikidataGame.Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WikidataGame.Backend.Models.MiniGame", b =>
                {
                    b.HasOne("WikidataGame.Backend.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WikidataGame.Backend.Models.User", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WikidataGame.Backend.Models.Question", b =>
                {
                    b.HasOne("WikidataGame.Backend.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WikidataGame.Backend.Models.Tile", b =>
                {
                    b.HasOne("WikidataGame.Backend.Models.Category", "ChosenCategory")
                        .WithMany()
                        .HasForeignKey("ChosenCategoryId");

                    b.HasOne("WikidataGame.Backend.Models.Game")
                        .WithMany("Tiles")
                        .HasForeignKey("GameId");

                    b.HasOne("WikidataGame.Backend.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");
                });
#pragma warning restore 612, 618
        }
    }
}
