// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WikidataGame.Backend.Helpers;

namespace WikidataGame.Backend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190625100819_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("WikidataGame.Backend.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "cf3111af-8b18-4c6f-8ee6-115157d54b79",
                            Title = "Geography"
                        },
                        new
                        {
                            Id = "1b9185c0-c46b-4abf-bf82-e464f5116c7d",
                            Title = "Space"
                        },
                        new
                        {
                            Id = "6c22af9b-2f45-413b-995d-7ee6c61674e5",
                            Title = "Chemistry"
                        });
                });

            modelBuilder.Entity("WikidataGame.Backend.Models.Game", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<int>("AccessibleTilesCount");

                    b.Property<int>("MapHeight");

                    b.Property<int>("MapWidth");

                    b.Property<int>("MoveCount");

                    b.Property<string>("NextMovePlayerId")
                        .HasMaxLength(36);

                    b.Property<int>("StepsLeftWithinMove");

                    b.HasKey("Id");

                    b.HasIndex("NextMovePlayerId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("WikidataGame.Backend.Models.GameUser", b =>
                {
                    b.Property<string>("GameId")
                        .HasMaxLength(36);

                    b.Property<string>("UserId")
                        .HasMaxLength(36);

                    b.Property<bool>("IsWinner");

                    b.HasKey("GameId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GameUser");
                });

            modelBuilder.Entity("WikidataGame.Backend.Models.MiniGame", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<string>("AnswerOptionsString")
                        .IsRequired();

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<string>("CorrectAnswerString")
                        .IsRequired();

                    b.Property<string>("GameId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<int>("Status");

                    b.Property<string>("TaskDescription")
                        .IsRequired();

                    b.Property<string>("TileId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TileId");

                    b.ToTable("MiniGames");
                });

            modelBuilder.Entity("WikidataGame.Backend.Models.Question", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<int>("MiniGameType");

                    b.Property<string>("SparqlQuery")
                        .IsRequired();

                    b.Property<string>("TaskDescription")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = "a4b7c4ba-6acb-4f9a-821b-7a44aa7b6761",
                            CategoryId = "cf3111af-8b18-4c6f-8ee6-115157d54b79",
                            MiniGameType = 2,
                            SparqlQuery = @"SELECT ?answer ?question WHERE {  
                          ?item wdt:P31 wd:Q5119.
                          ?item wdt:P1376 ?land.
                          ?land wdt:P31 wd:Q6256.
                          OPTIONAL { 
                            ?item rdfs:label ?answer;
                                    filter(lang(?answer) = 'en')
                              ?land rdfs:label ?question;
                                    filter(lang(?question) = 'en').
                          }
                            }
                        ORDER BY MD5(CONCAT(STR(?answer), STR(NOW()))) LIMIT 4",
                            TaskDescription = "What is the name of the capital of {0}?"
                        },
                        new
                        {
                            Id = "aca0f5f7-b000-42fb-b713-f5fe43748761",
                            CategoryId = "cf3111af-8b18-4c6f-8ee6-115157d54b79",
                            MiniGameType = 2,
                            SparqlQuery = @"SELECT ?answer (COUNT(?item) AS ?question)
                        WHERE 
                        {
                          ?item wdt:P31 wd:Q6256.
                          ?item wdt:P30 ?continent.
                          ?continent wdt:P31 wd:Q5107.
                          OPTIONAL {?continent rdfs:label ?answer ;
                                    filter(lang(?answer) = 'en')
                                          }
                        }
                        GROUP BY ?continent ?answer
                        ORDER BY MD5(CONCAT(STR(?answer), STR(NOW())))
                        LIMIT 4",
                            TaskDescription = "Which continent has {0} countries?"
                        },
                        new
                        {
                            Id = "9a70639b-3447-475a-905a-e866a0c98a1c",
                            CategoryId = "cf3111af-8b18-4c6f-8ee6-115157d54b79",
                            MiniGameType = 2,
                            SparqlQuery = @"SELECT ?answer ?question
                        WITH {
                          SELECT DISTINCT ?state ?continent ?stateLabel ?continentLabel WHERE {
                            ?state wdt:P31/wdt:P279* wd:Q3624078;
                                 p:P463 ?memberOfStatement.
                            ?memberOfStatement a wikibase:BestRank;
                                               ps:P463 wd:Q1065.
                            MINUS { ?memberOfStatement pq:P582 ?endTime. }
                            MINUS { ?state wdt:P576|wdt:P582 ?end. }
                            ?state p:P30 ?continentStatement.
                          ?continentStatement a wikibase:BestRank;
                                              ps:P30 ?continent.
                            VALUES ?continent { wd:Q49 wd:Q48 wd:Q46 wd:Q18 wd:Q15 } # ohne Ozeanien
                            MINUS { ?continentStatement pq:P582 ?endTime. }
                          } ORDER BY MD5(CONCAT(STR(?state), STR(NOW())))
                        } AS %states
                        WITH {
                          SELECT ?state ?continent WHERE {
                            INCLUDE %states.
                            {
                              SELECT DISTINCT ?continent WHERE {
                                VALUES ?continent { wd:Q49 wd:Q48 wd:Q46 wd:Q18 wd:Q15 } # ohne Ozeanien
                              } ORDER BY MD5(CONCAT(STR(?continent), STR(NOW())))
                              LIMIT 1
                            }
                          }
                        } AS %selectedContinent
                        WITH {
                          SELECT DISTINCT ?state ?continent WHERE {
                            INCLUDE %selectedContinent.
                          }
                          LIMIT 1
                        } AS %threeStates
                        WITH {
                          # dump continent for false answers (needed for sorting)
                          SELECT ?state ?empty WHERE {
                            INCLUDE %states.
                            FILTER NOT EXISTS { INCLUDE %selectedContinent. }
                          }
                          LIMIT 3
                        } AS %oneState
                        WHERE {
                            { INCLUDE %oneState. } UNION
                            { INCLUDE %threeStates. }

                          SERVICE wikibase:label { 
                            bd:serviceParam wikibase:language 'en'.
                            ?state  rdfs:label ?answer.
                            ?continent rdfs:label ?question.
                          }
                        }
                        ORDER BY DESC(?question)",
                            TaskDescription = "Which country is a part of continent {0}?"
                        },
                        new
                        {
                            Id = "46679c4f-ef97-445d-9a70-d95a5337720f",
                            CategoryId = "cf3111af-8b18-4c6f-8ee6-115157d54b79",
                            MiniGameType = 2,
                            SparqlQuery = @"SELECT DISTINCT ?question ?answer
                        WITH {
                          SELECT DISTINCT (?state as ?country) WHERE {
                            ?state wdt:P31/wdt:P279* wd:Q3624078;
                                   p:P463 ?memberOfStatement.
                            ?memberOfStatement a wikibase:BestRank;
                                                 ps:P463 wd:Q1065.
                            MINUS { ?memberOfStatement pq:P582 ?endTime. }
                            MINUS { ?state wdt:P576|wdt:P582 ?end. }
                          }
                        } AS %states
                        WITH { 
                              SELECT DISTINCT ?country ?sea WHERE {
                                  BIND(wd:Q545 AS ?sea).
                                  ?sea wdt:P205 ?country.
                                }
                            } as %basins
                        WITH { 
                              SELECT DISTINCT ?country ?sea WHERE {
                                  INCLUDE %basins.
                                } ORDER BY MD5(CONCAT(STR(?country), STR(NOW()))) LIMIT 3
                            } as %threeBasins
                        WITH {
                          SELECT DISTINCT ?country ?sea ?noSea
                            WHERE {
                              INCLUDE %states.
                              ?country wdt:P30 wd:Q46.
                              BIND(wd:Q545 as ?noSea).
                            FILTER NOT EXISTS { INCLUDE %basins.}
                          } ORDER BY MD5(CONCAT(STR(?country), STR(NOW()))) LIMIT 1
                        } AS %oneOther
                        WHERE {
                          { INCLUDE %oneOther. } UNION
                          { INCLUDE %threeBasins. }
                          SERVICE wikibase:label { 
                            bd:serviceParam wikibase:language 'en'. 
                            ?country rdfs:label ?answer.
                            ?noSea rdfs:label ?question. 
                          }
                        }
                        order by DESC(?question)",
                            TaskDescription = "Which country is no basin country of the Baltic Sea?"
                        },
                        new
                        {
                            Id = "4f6c477e-7025-44b4-a3b0-f3ebd8902902",
                            CategoryId = "cf3111af-8b18-4c6f-8ee6-115157d54b79",
                            MiniGameType = 2,
                            SparqlQuery = @"SELECT DISTINCT ?question ?answer
                        WITH {
                          SELECT DISTINCT (?state as ?country) WHERE {
                            ?state wdt:P31/wdt:P279* wd:Q3624078;
                                   p:P463 ?memberOfStatement.
                            ?memberOfStatement a wikibase:BestRank;
                                                 ps:P463 wd:Q1065.
                            MINUS { ?memberOfStatement pq:P582 ?endTime. }
                            MINUS { ?state wdt:P576|wdt:P582 ?end. }
                          }
                        } AS %states
                        WITH { 
                              SELECT DISTINCT ?country ?sea WHERE {
                                  BIND(wd:Q1247 AS ?sea).
                                  {
                                    ?sea wdt:P205 ?country.
                                  }
                                  UNION
                                  {
                                    INCLUDE %states.
                                    ?country wdt:P361 ?region.
                                    VALUES ?region {wd:Q664609 wd:Q166131 wd:Q778 wd:Q93259 wd:Q19386 wd:Q5317255}.
                                  }
                                } ORDER BY MD5(CONCAT(STR(?country), STR(NOW())))
                            } as %basins
                        WITH { 
                            SELECT DISTINCT ?country ?sea
                            WHERE {
                              INCLUDE %basins.
                                } LIMIT 3
                            } as %threeBasins
                        WITH {
                          SELECT DISTINCT ?country ?noSea
                            WHERE {
                              INCLUDE %states.
                              ?country wdt:P361 ?region.
                              BIND(wd:Q1247 as ?noSea).
                              VALUES ?region {wd:Q12585 wd:Q653884}.
                              FILTER NOT EXISTS {?country wdt:P31 wd:Q112099.}
                              FILTER NOT EXISTS {?country wdt:P31 wd:Q13107770.}
                              FILTER NOT EXISTS {?country wdt:P361 wd:Q27611.}
                              FILTER NOT EXISTS {INCLUDE %basins.}
                          } ORDER BY MD5(CONCAT(STR(?country), STR(NOW())))
                          LIMIT 1
                        } AS %oneOther
                        WHERE {
                          { INCLUDE %oneOther. } UNION
                          { INCLUDE %threeBasins. } 
                          SERVICE wikibase:label { 
                            bd:serviceParam wikibase:language 'en'.
                            ?country rdfs:label ?answer.
                            ?noSea rdfs:label ?question.
                          }
                        }
                        order by DESC(?noSea)",
                            TaskDescription = "Which country is no basin country of the {0}?"
                        },
                        new
                        {
                            Id = "a6a470de-9efb-4fde-9388-6eb20f2ff1f4",
                            CategoryId = "cf3111af-8b18-4c6f-8ee6-115157d54b79",
                            MiniGameType = 2,
                            SparqlQuery = @"SELECT DISTINCT ?question ?answer
                        WITH {
                          SELECT DISTINCT (?state as ?country) WHERE {
                            ?state wdt:P31/wdt:P279* wd:Q3624078;
                                   p:P463 ?memberOfStatement.
                            ?memberOfStatement a wikibase:BestRank;
                                                 ps:P463 wd:Q1065.
                            MINUS { ?memberOfStatement pq:P582 ?endTime. }
                            MINUS { ?state wdt:P576|wdt:P582 ?end. }
                          }
                          ORDER BY MD5(CONCAT(STR(?state), STR(NOW())))
                        } AS %states
                        WITH { 
                              SELECT DISTINCT ?country WHERE {
                                  BIND(wd:Q4918 AS ?sea).
                                  ?sea wdt:P205 ?country.
                                } LIMIT 3
                            } as %threeBasins
                        WITH {
                          SELECT DISTINCT ?country ?noSea
                            WHERE {
                              BIND(wd:Q4918 AS ?noSea).
                              INCLUDE %states.
                              ?country wdt:P361 ?region.
                              VALUES ?region { wd:Q7204 wd:Q984212 wd:Q27449 wd:Q263686 wd:Q50807777 wd:Q27468 wd:Q27381 }.
                              FILTER NOT EXISTS {?country wdt:P31 wd:Q51576574.}
                          } LIMIT 1
                        } AS %oneOther
                        WHERE {
                          { INCLUDE %oneOther. } UNION
                          { INCLUDE %threeBasins. }
                          SERVICE wikibase:label { 
                            bd:serviceParam wikibase:language 'en'.
                            ?country rdfs:label ?answer.
                            ?noSea rdfs:label ?question.
                          }
                        }
                        order by DESC(?noSea)",
                            TaskDescription = "Which country is no basin country of the {0}?"
                        },
                        new
                        {
                            Id = "29fed1d0-d306-4946-8109-63b8aaf0262e",
                            CategoryId = "cf3111af-8b18-4c6f-8ee6-115157d54b79",
                            MiniGameType = 2,
                            SparqlQuery = @"SELECT DISTINCT ?answer ?question WHERE {
                        { SELECT DISTINCT ?river ?continent (avg(?length2) as ?length)
                            WHERE
                            {
                              ?river wdt:P31/wdt:P279* wd:Q355304;
                                 wdt:P2043 ?length2;
                                 wdt:P30 ?continent.
                              {
                                SELECT DISTINCT ?continent WHERE {
                                  VALUES ?continent { wd:Q49 wd:Q48 wd:Q46 wd:Q18 wd:Q15  } # ohne Ozeanien
                                } ORDER BY MD5(CONCAT(STR(?continent), STR(NOW()))) LIMIT 1
                               } 
                            }
                            group by ?river ?continent
                        }
                        OPTIONAL {?continent rdfs:label ?question;
                            filter(lang(?question) = 'en')
                            ?river rdfs:label ?answer ;
                            filter(lang(?answer) = 'en')
                        }
                    }
                    order by desc(?length)
                    limit 4",
                            TaskDescription = "What is the longest river in {0}?"
                        },
                        new
                        {
                            Id = "f88a4dc0-8187-43c4-8775-593822bf4af1",
                            CategoryId = "cf3111af-8b18-4c6f-8ee6-115157d54b79",
                            MiniGameType = 1,
                            SparqlQuery = @"SELECT ?question (CONCAT( ?ans, ' (', ?country, ')' ) as ?answer) WHERE {
                      { SELECT DISTINCT (?answer as ?ans) (MAX(?image) as ?question) ?country WHERE { 
                        ?landmark wdt:P31/wdt:P279* wd:Q2319498;
                                 wikibase:sitelinks ?sitelinks;
                                 wdt:P18 ?image;
                                 wdt:P17 ?cntr.
                        ?landmark wdt:P1435 ?type.
                        FILTER(?sitelinks >= 10)

                        SERVICE wikibase:label { 
                            bd:serviceParam wikibase:language 'en'.
                            ?cntr rdfs:label ?country.
                            ?landmark rdfs:label ?answer.}
                        }
                        GROUP BY ?answer ?country
                        ORDER BY MD5(CONCAT(STR(?question), STR(NOW())))
                        LIMIT 4 
                      }
                    }",
                            TaskDescription = "Which famous monument is this: {0}?"
                        },
                        new
                        {
                            Id = "bc7a22ee-4985-44c3-9388-5c7dd6b8762e",
                            CategoryId = "cf3111af-8b18-4c6f-8ee6-115157d54b79",
                            MiniGameType = 0,
                            SparqlQuery = @"#sort countries by number of inhabitants (ascending)
                                    SELECT (?stateLabel as ?answer) ?question 
                                    WITH {
                                      # subquery: get 4 random countries with their average number of inhabitants
                                      SELECT DISTINCT ?state ?stateLabel (ROUND(AVG(?population) / 1000) * 1000 as ?population) {

                                        {
                                          # subquery: list of all countries in the world
                                          SELECT DISTINCT ?state ?stateLabel ?population ?dateOfCensus
                                                                 WHERE {
                                                                   ?state wdt:P31/wdt:P279* wd:Q3624078;
                                                                          p:P463 ?memberOfStatement;
                                                                          p:P1082 [
                                                                            ps:P1082 ?population;
                                                                                     pq:P585 ?dateOfCensus
                                                                          ].
                                                                   ?memberOfStatement a wikibase:BestRank;
                                                                                        ps:P463 wd:Q1065.
                                                                   MINUS { ?memberOfStatement pq:P582 ?endTime. }
                                                                   MINUS { ?state wdt:P576|wdt:P582 ?end. }
                                                                   ?state p:P30 ?continentStatement.
                                                                   ?continentStatement a wikibase:BestRank;
                                                                                         ps:P30 ?continent.
                                                                   VALUES ?continent { wd:Q49 wd:Q48 wd:Q46 wd:Q18 wd:Q15 } # ohne Ozeanien
                                                                   MINUS { ?continentStatement pq:P582 ?endTime. }
                                                                   SERVICE wikibase:label {
                                                                     bd:serviceParam wikibase:language '[AUTO_LANGUAGE],en'.
                                                                   }
                                                                   FILTER(YEAR(?dateOfCensus) > YEAR(NOW()) - 5)
                                                                 }
                                        }
                                      }
                                      GROUP BY ?state ?stateLabel
                                      ORDER BY MD5(CONCAT(STR(?item), STR(NOW()))) LIMIT 4
                                    } as %states

                                    WHERE {
                                      # fill the question (hard-coded) and sort by population (= correct sort order needed for sorting game)
                                      INCLUDE %states.
                                      BIND('number of inhabitants' as ?question).
                                    } ORDER BY ?population",
                            TaskDescription = "Sort countries by {0} (ascending)"
                        },
                        new
                        {
                            Id = "a4a7289a-3053-4ad7-9c60-c75a18305243",
                            CategoryId = "1b9185c0-c46b-4abf-bf82-e464f5116c7d",
                            MiniGameType = 0,
                            SparqlQuery = @"# sort planets by average distance to sun
                        SELECT ?answer ?question WHERE {
                          {SELECT DISTINCT ?answer ?avgDistanceToSun
                                                   WHERE 
                                                   {
                                                     # fetch planets in our solar system
                                                     ?planet wdt:P31/wdt:P279+ wd:Q17362350.
                                                     ?planet p:P2243/psv:P2243 [wikibase:quantityAmount ?apoapsis; wikibase:quantityUnit ?apoapsisUnit].
                                                     ?planet p:P2244/psv:P2244 [wikibase:quantityAmount ?periapsis; wikibase:quantityUnit ?periapsisUnit].
                                                     # NOTE: there are only three planets with apoapsis and periapsis in AU; 4 planets in total
                                                     # FILTER (?apoapsisUnit = wd:Q1811 && ?periapsisUnit = wd:Q1811)
                                                     BIND ((?apoapsis + ?periapsis) / 2 as ?avgDistanceToSun)
                                                     FILTER (?apoapsisUnit = wd:Q828224 && ?periapsisUnit = wd:Q828224)
                                                     SERVICE wikibase:label { 
                                                       bd:serviceParam wikibase:language 'en'.
                                                       ?planet  rdfs:label ?answer.} 
                                                   } ORDER BY MD5(CONCAT(STR(?answer), STR(NOW()))) LIMIT 4}
                          BIND('average distance to sun' as ?question)
                        } ORDER BY ?avgDistanceToSun",
                            TaskDescription = "Sort planets by {0} (ascending)"
                        },
                        new
                        {
                            Id = "2ed01768-9ab6-4895-8cbf-09dbc6f957e0",
                            CategoryId = "1b9185c0-c46b-4abf-bf82-e464f5116c7d",
                            MiniGameType = 0,
                            SparqlQuery = @"# sort planets by radius
                        SELECT ?answer ?question WHERE {
                          {SELECT ?planet ?answer ?radius WHERE {
                            ?planet wdt:P397 wd:Q525;
                                    p:P2120 [
                                      ps:P2120 ?radius;
                                               pq:P518 wd:Q23538
                                    ].
                            SERVICE wikibase:label { 
                              bd:serviceParam wikibase:language 'en'.
                              ?planet  rdfs:label ?answer.}
                          } ORDER BY MD5(CONCAT(STR(?answer), STR(NOW()))) LIMIT 4}
                          BIND ('radius' as ?question)
                        }
                        ORDER BY ?radius",
                            TaskDescription = "Sort planets by {0} (ascending)"
                        },
                        new
                        {
                            Id = "14d93797-c61c-4415-b1ed-359d180237ff",
                            CategoryId = "1b9185c0-c46b-4abf-bf82-e464f5116c7d",
                            MiniGameType = 2,
                            SparqlQuery = @"#Which of these moons belongs to the planet {0}?
                        SELECT ?question ?answer 
                        WITH {
                          # subquery 1: get all moons of planets of our solar system
                          SELECT ?moon ?parent ?question ?answer WHERE {
                          {
                            SELECT ?moon ?moonLabel ?parent WHERE {
                              ?moon wdt:P31/wdt:P279* wd:Q2537;
                                    wdt:P397 ?parent.
                              ?parent wdt:P361+ wd:Q544.
                              BIND (?parent as ?planet).
                              SERVICE wikibase:label { bd:serviceParam wikibase:language '[AUTO_LANGUAGE],en'. }
                            }
                          }
                          FILTER(!CONTAINS(?moonLabel, '/'))
                        } ORDER BY MD5(CONCAT(STR(?moon), STR(NOW()))) # order by random
                        } as %moons

                        WITH {
                          # subquery 2:
                          # get one random planet
                          # get all moons out of list 1 which belong to that planet
                          SELECT ?moon ?parent WHERE {
                            INCLUDE %moons.
                            {
                              SELECT DISTINCT ?parent WHERE {
                                {
                                  SELECT ?moon ?moonLabel ?parentLabel ?parent WHERE {
                                    ?moon wdt:P31/wdt:P279* wd:Q2537;
                                          wdt:P397 ?parent.
                                    ?parent wdt:P361+ wd:Q544.
                                    SERVICE wikibase:label { bd:serviceParam wikibase:language '[AUTO_LANGUAGE],en'. }
                                  }
                                }
                                FILTER(!CONTAINS(?moonLabel, '/'))
                              } 
                              GROUP BY ?parent
                                       ORDER BY MD5(CONCAT(STR(?parentLabel), STR(NOW()))) # order by random
                                       LIMIT 1
                            }
                          }
                        } AS %selectedPlanet

                        WITH {
                          # subquery 3: get one moon out of list 2 (= correct answer)
                          SELECT DISTINCT ?moon ?parent WHERE {
                            INCLUDE %selectedPlanet.
                          } ORDER BY MD5(CONCAT(STR(?moon), STR(NOW()))) 
                          LIMIT 1
  
                        } AS %oneMoon

                        WITH {
                        # subquery 4 get three false answers (question/parent must be empty here!)
                          SELECT DISTINCT ?moon ?empty WHERE {
                            INCLUDE %moons.
                            FILTER NOT EXISTS { INCLUDE %selectedPlanet. }
                          }
                          LIMIT 3
                        } AS %threeMoons

                        WITH {
                          # another subquery because of dubios server errors
                          SELECT * WHERE {

                             {INCLUDE %threeMoons } UNION {INCLUDE %oneMoon}
                          }
                        } AS %final WHERE {
                          INCLUDE %final.
  
                          SERVICE wikibase:label {
                            bd:serviceParam wikibase:language 'en'.
                            ?parent  rdfs:label ?question.
                            ?moon rdfs:label ?answer.
                          }
                        } ORDER BY DESC(?answer)",
                            TaskDescription = "Which of these moons belongs to planet {0}?"
                        },
                        new
                        {
                            Id = "5f7e813a-3cfa-4617-86d1-514b481b37a8",
                            CategoryId = "6c22af9b-2f45-413b-995d-7ee6c61674e5",
                            MiniGameType = 2,
                            SparqlQuery = @"SELECT ?question ?answer WHERE {
                      ?element wdt:P31 wd:Q11344;
                               wdt:P1086 ?number;
                               wdt:P246 ?answer.
                      FILTER(1 <= ?number &&
                             ?number <= 118)
                      SERVICE wikibase:label {
                        bd:serviceParam wikibase:language 'en'.
                        ?element  rdfs:label ?question.
                      }
                    }
                    ORDER BY MD5(CONCAT(STR(?question), STR(NOW()))) # order by random
                    LIMIT 4",
                            TaskDescription = "What's the chemical symbol for {0}?"
                        },
                        new
                        {
                            Id = "40677b0f-9d5f-46d2-ab85-a6c40afb5f87",
                            CategoryId = "6c22af9b-2f45-413b-995d-7ee6c61674e5",
                            MiniGameType = 2,
                            SparqlQuery = @"SELECT ?question ?answer WHERE {
                      ?element wdt:P31 wd:Q11344;
                               wdt:P1086 ?number;
                               wdt:P246 ?question.
                      FILTER(1 <= ?number &&
                             ?number <= 118)
                      SERVICE wikibase:label {
                        bd:serviceParam wikibase:language 'en'.
                        ?element  rdfs:label ?answer.
                      }
                    }
                    ORDER BY MD5(CONCAT(STR(?answer), STR(NOW()))) # order by random
                    LIMIT 4",
                            TaskDescription = "Which element has the chemical symbol {0}?"
                        },
                        new
                        {
                            Id = "e8f99165-baa3-47b2-be35-c42ab2d5f0a0",
                            CategoryId = "6c22af9b-2f45-413b-995d-7ee6c61674e5",
                            MiniGameType = 0,
                            SparqlQuery = @"#sort chemical elements by number in period system
                        SELECT ?question ?answer WHERE {
                          BIND ('number in period system' as ?question).
                          {SELECT ?item ?element ?number ?symbol WHERE {
                            ?item wdt:P31 wd:Q11344;
                                  wdt:P1086 ?number;
                                  wdt:P246 ?symbol.
                            FILTER(1 <= ?number &&
                                   ?number <= 118)
                            SERVICE wikibase:label {
                              bd:serviceParam wikibase:language 'en'.
                              ?item  rdfs:label ?element.
                            }
                          }
                          ORDER BY MD5(CONCAT(STR(?element), STR(NOW()))) # order by random
                          LIMIT 4}
                          BIND (?element as ?answer).
                        } ORDER BY ASC(?number)",
                            TaskDescription = "Sort chemical elements by {0} (ascending)."
                        },
                        new
                        {
                            Id = "d9011896-04e5-4d32-8d3a-02a6d2b0bdb6",
                            CategoryId = "f9c52d1a-9315-423d-a818-94c1769fffe5",
                            MiniGameType = 0,
                            SparqlQuery = @"#English kings until 1707
                        SELECT DISTINCT ?question ?answer WHERE {
                          {SELECT DISTINCT ?human ?name ?reignstart ?reignend WHERE {
                            ?human wdt:P31 wd:Q5.      #find humans
                            ?human p:P39 ?memberOfStatement.
                            ?memberOfStatement a wikibase:BestRank;
                                                 ps:P39 wd:Q18810062. # position

                            ?memberOfStatement pq:P580 ?reignstart;
                                               pq:P582 ?reignend. 
                            FILTER (?reignstart >= '1066-12-31T00:00:00Z'^^xsd:dateTime) . #start with William the Conquerer
                            MINUS {?human wdt:P97 wd:Q719039.}

                            SERVICE wikibase:label {
                              bd:serviceParam wikibase:language 'en'.
                              ?human  rdfs:label ?name.
                            }
                          } ORDER BY MD5(CONCAT(STR(?continent), STR(NOW())))
                          LIMIT 4}
                                BIND (?name as ?answer).
                                BIND ('the beginning of their reigning period' as ?question).
                        } ORDER BY ?reignstart",
                            TaskDescription = "Sort these English kings by {0} (ascending)."
                        },
                        new
                        {
                            Id = "909182d1-4ae6-46ea-bd9b-8c4323ea53fa",
                            CategoryId = "55a4622b-0fed-4284-af0b-3c7f4c3e88d0",
                            MiniGameType = 0,
                            SparqlQuery = @"# sort EU countries by the date they joined
                        SELECT ?date (SAMPLE(?answer) AS ?answer) (SAMPLE(?question) AS ?question) 
                        WITH {
                          SELECT DISTINCT (?memberOfEuSince as ?date) ?answer WHERE {
                            {SELECT ?item ?memberOfEuSince
                                          WHERE 
                                          {
                                            ?item p:P463 [ps:P463 wd:Q458;
                                                                  pq:P580 ?memberOfEuSince].
                                          }
                            }
                            SERVICE wikibase:label {
                              bd:serviceParam wikibase:language 'en'.
                              ?item  rdfs:label ?answer.
                            }
                          }
                        } AS %dates
                        WITH {
                          SELECT DISTINCT ?date WHERE {
                            INCLUDE %dates.
                          }
                          ORDER BY MD5(CONCAT(STR(?continent), STR(NOW())))
                          LIMIT 4
                        } AS %fourDates
                        WHERE {
                          INCLUDE %fourDates.
                          INCLUDE %dates.
                          BIND('the date they joined the EU' as ?question).
                        }
                        GROUP BY ?date
                        ORDER BY ?date",
                            TaskDescription = "Sort the countries by {0} (ascending)."
                        });
                });

            modelBuilder.Entity("WikidataGame.Backend.Models.Tile", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<string>("ChosenCategoryId")
                        .HasMaxLength(36);

                    b.Property<int>("Difficulty");

                    b.Property<string>("GameId");

                    b.Property<bool>("IsAccessible");

                    b.Property<string>("OwnerId")
                        .HasMaxLength(36);

                    b.HasKey("Id");

                    b.HasIndex("ChosenCategoryId");

                    b.HasIndex("GameId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Tiles");
                });

            modelBuilder.Entity("WikidataGame.Backend.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<string>("DeviceId")
                        .IsRequired();

                    b.Property<int>("Platform");

                    b.Property<string>("PushRegistrationId");

                    b.Property<string>("PushToken");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WikidataGame.Backend.Models.Game", b =>
                {
                    b.HasOne("WikidataGame.Backend.Models.User", "NextMovePlayer")
                        .WithMany()
                        .HasForeignKey("NextMovePlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WikidataGame.Backend.Models.GameUser", b =>
                {
                    b.HasOne("WikidataGame.Backend.Models.Game", "Game")
                        .WithMany("GameUsers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WikidataGame.Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WikidataGame.Backend.Models.MiniGame", b =>
                {
                    b.HasOne("WikidataGame.Backend.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WikidataGame.Backend.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WikidataGame.Backend.Models.User", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WikidataGame.Backend.Models.Tile", "Tile")
                        .WithMany()
                        .HasForeignKey("TileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WikidataGame.Backend.Models.Question", b =>
                {
                    b.HasOne("WikidataGame.Backend.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WikidataGame.Backend.Models.Tile", b =>
                {
                    b.HasOne("WikidataGame.Backend.Models.Category", "ChosenCategory")
                        .WithMany()
                        .HasForeignKey("ChosenCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WikidataGame.Backend.Models.Game")
                        .WithMany("Tiles")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WikidataGame.Backend.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
